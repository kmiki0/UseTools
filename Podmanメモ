# 【初心者】気になっていたので、Podmanインストールしてみた

普段、Dockerを使っていますが、「Dockerより軽くて安全らしい!」という  
噂だけで、Podmanが気になりすぎるので、使ってみることにしました。


## はじめに
とりあえず、最低限使えるレベルのものをレベルで書いていきます。  
詳しい項目の説明等は、別途書く予定です。

### Podmanのいい所
Dockerと互換性があるため、Dockerのコマンドをほぼそのまま使うことができます！
例えば、Dockerの `docker run` は、Podmanの `podman run` など、置き換えるだけで使える！便利！！

## 何が軽くて安全なのか？
- 安全な理由
  - 非root権限でコンテナを実行することができる。  
  > Dockerは、デフォルト設定でコンテナをroot権限で実行される
  > 対応として、Dockerfile の USER で指定したユーザーで実行することで、
  > root権限での実行を防ぐことができるが、Podmanはデフォルトで非root権限で実行される

- 軽い理由
  - Podmanはデーモンを使わないため、Dockerよりも軽量

> デーモンって？
> - デーモン（英: daemon）は、UNIX系オペレーティングシステムにおいて、  
>   バックグラウンドで動作するプロセスのことです。

## なにわともあれ、やってみよう！

### 前提条件
- WSL2がインストールされていること

### Podmanのインストール

1. Linuxの名前やバージョン、ID等を取得
```bash
 . /etc/os-release
```
2. Ubuntuシステムでのパッケージのソースリストに新しいリポジトリを追加する 
```bash
 sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x${NAME}_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
```

3. wgetコマンドを使用して、指定されたURLからファイルをダウンロードして、Release.keyという名前で保存する
```bash
 wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/x${NAME}_${VERSION_ID}/Release.key -O Release.key
```

4. apt-key addコマンドを使用して、Release.keyファイルをリリースキーとしてシステムに追加する
```bash
 sudo apt-key add - < Release.key
```

5. パッケージリストを更新する (-qq : 出力を抑制するオプション) 
```bash
 sudo apt-get update -qq
```

6. Podmanをインストールする
```bash
 sudo apt-get -qq -y install podman
```

7. Podmanのバージョンを確認する
```bash
 podman --version
```

### パッケージの公開鍵を取得し、システムに追加する

```bash
curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_22.04/Release.key| gpg --dearmor | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
```
- `curl`コマンドを使用して、指定されたURLから公開鍵をダウンロードします。
  - `gpg`コマンドを使用して、その公開鍵を解読します。
  - `sudo tee`コマンドを使用して、解読された公開鍵を
    `/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg`というファイルに書き込みます。
  - 最後に、`> /dev/null`を使用して出力を無視します。


> このコードの目的は、`OpenSUSE`のリポジトリからパッケージをインストールするために、必要な公開鍵を取得し、システムに追加することです。
> 公開鍵は、パッケージの信頼性を確保するために使用されます。

### パッケージの追加リポジトリを設定

```bash
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
```

- `echo`コマンドを使用して新しいリポジトリのエントリを作成する。
    - `deb`はリポジトリの形式を指定する。
    - `[arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg]`は
    リポジトリのアーキテクチャと署名ファイルを指定する。
        - archパラメータには、`dpkg --print-architecture`コマンドを使用して、現在のシステムのアーキテクチャが指定される。
        - signed-byパラメータには、署名ファイルのパスが指定される。
    - `https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/`は
    リポジトリのURLを指定する。
    - `/etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list`は
      リポジトリのエントリを書き込むファイルのパスを指定する。

- `sudo tee`コマンドを使用してエントリをファイルに書き込みます。
    - sudo teeコマンドを使用して、
      エントリを`/etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list`ファイルに書き込みます。

- 最後に、`> /dev/null`を使用して出力を無視します。

> リダイレクト演算子 `>` を使用して、`tee`コマンドの出力を`/dev/null`にリダイレクトします。
> `/dev/null`は、データを捨てるための特殊なファイルです。







## 終わりに
Podmanを使ってみましたが、Dockerとの互換性があるため、  
Dockerを使っている人にとっては、操作感は変わらないかもしれません。  
今回は、インストールまでの手順を書きましたが、  
また、コンテナ同士の通信や、ネットワーク周りの設定なども試してみたいと思います！



## 参照
- [Docker一強の終焉にあたり、押さえるべきContainer事情](https://zenn.dev/ttnt_1013/articles/f36e251a0cd24e)
- [Docker Desktopと代替ソフトウェア大集合](https://devops-blog.virtualtech.jp/entry/20230104/1672800265)
- [WSL2にPodmanを入れる](https://blog.uyorum.net/post/podman-on-wsl2/)
